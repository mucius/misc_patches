diff -urN viewvc2034org/lib/toutf8.py viewvc2034/lib/toutf8.py
--- viewvc2034org/lib/toutf8.py	1970-01-01 09:00:00.000000000 +0900
+++ viewvc2034/lib/toutf8.py	2008-11-05 18:07:22.240000000 +0900
@@ -0,0 +1,37 @@
+import pykf
+import sys
+import cgi
+
+def trim(x, strlen):
+  length = len(x)
+  sys.stderr.write('pas00\n')
+  if ( strlen > 0) and ( length > strlen):
+    sys.stderr.write('pas01\n')
+    x = x[:strlen]
+    if not ( ord( x[ -1]) & 0x80):
+      return x
+    elif ( ord( x[ -1]) & 0x40):
+      return x[ :-1]
+    elif ( ord( x[ -2]) & 0x40):
+      return x[ :-2]
+    elif ( ord( x[ -3]) & 0x40):
+      return x[ :-3]
+  return x
+
+def toutf8(txt, strlen = 0):
+  """pykf.guess cannot guess utf-8 string (wrong to sjis)"""
+  sys.stderr.write( 'enter toutf8()!!!\r\n')
+  c = pykf.guess(txt)
+  if c is pykf.JIS:
+    u = unicode(txt, 'iso2022_jp')
+    return trim( u.encode('utf-8'), strlen)
+  for enc in ['utf-8', 'euc_jp', 'shift_jis']:
+    try:
+      u = unicode(txt, enc)
+      return trim( u.encode('utf-8'), strlen)
+    except UnicodeError:
+      pass
+  return txt
+
+def escape(txt):
+  return cgi.escape( toutf8(txt))
diff -urN viewvc2034org/lib/viewvc.py viewvc2034/lib/viewvc.py
--- viewvc2034org/lib/viewvc.py	2008-10-31 02:37:04.023491000 +0900
+++ viewvc2034/lib/viewvc.py	2008-11-05 18:07:18.596000000 +0900
@@ -24,7 +24,7 @@
 # standard modules that we know are in the path or builtin
 import sys
 import os
-import cgi
+import toutf8 as cgi
 import gzip
 import mimetypes
 import re
@@ -1084,14 +1084,15 @@
 def format_log(log, cfg, htmlize=1):
   if not log:
     return log
+  length = len(log)
+  log = cgi.toutf8(log, strlen=cfg.options.short_log_len)
   if htmlize:
-    s = htmlify(log[:cfg.options.short_log_len],
-                cfg.options.mangle_email_addresses)
+    s = htmlify(log, cfg.options.mangle_email_addresses)
   else:
-    s = cgi.escape(log[:cfg.options.short_log_len])
+    s = cgi.escape(log)
     if cfg.options.mangle_email_addresses == 2:
       s = re.sub(_re_rewrite_email, r'\1@...', s)
-  if len(log) > cfg.options.short_log_len:
+  if length > cfg.options.short_log_len:
     s = s + '...'
   return s
 
@@ -1271,9 +1272,12 @@
                                          escape=1)
   return data
 
-def retry_read(src, reqlen=CHUNK_SIZE):
+def retry_read(src, reqlen=CHUNK_SIZE, htmlize=1):
   while 1:
-    chunk = src.read(CHUNK_SIZE)
+    if htmlize:
+      chunk = src.readline()
+    else:
+      chunk = src.read(reqlen)
     if not chunk:
       # need to check for eof methods because the cStringIO file objects
       # returned by ccvs don't provide them
@@ -1284,7 +1288,7 @@
   
 def copy_stream(src, dst, cfg, htmlize=0):
   while 1:
-    chunk = retry_read(src)
+    chunk = retry_read(src=src, htmlize=htmlize)
     if not chunk:
       break
     if htmlize:
@@ -1403,7 +1407,7 @@
     return None
   if cfg.options.use_localtime:
     localtime = time.localtime(date)
-    return time.asctime(localtime) + ' ' + time.tzname[localtime[8]]
+    return time.asctime(localtime) + ' ' + cgi.toutf8(time.tzname[localtime[8]])
   else:
     return time.asctime(time.gmtime(date)) + ' UTC'
 
