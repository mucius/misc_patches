diff -urN viewvc-1.2.0-dev/lib/ezt.py viewvc-1.2.0-devm/lib/ezt.py
--- viewvc-1.2.0-dev/lib/ezt.py	2007-04-11 00:26:36.611604000 +0900
+++ viewvc-1.2.0-devm/lib/ezt.py	2008-11-11 16:02:20.509432400 +0900
@@ -231,6 +231,7 @@
 #    http://svn.webdav.org/repos/projects/ezt/trunk/
 #
 
+import toutf8
 import string
 import re
 from types import StringType, IntType, FloatType, LongType, TupleType
@@ -793,7 +794,7 @@
   ctx.fp.write(s)
   
 def _html_printer(ctx, s):
-  ctx.fp.write(cgi.escape(s))
+  ctx.fp.write( cgi.escape( toutf8.toutf8(s)))
 
 def _uri_printer(ctx, s):
   ctx.fp.write(urllib.quote(s))
diff -urN viewvc-1.2.0-dev/lib/toutf8.py viewvc-1.2.0-devm/lib/toutf8.py
--- viewvc-1.2.0-dev/lib/toutf8.py	1970-01-01 09:00:00.000000000 +0900
+++ viewvc-1.2.0-devm/lib/toutf8.py	2008-11-11 09:16:00.051432400 +0900
@@ -0,0 +1,18 @@
+import pykf
+
+def toutf8(txt):
+  """pykf.guess cannot guess utf-8 string (wrong to sjis)"""
+  if not txt:
+    return txt
+  c = pykf.guess(txt)
+  if c is pykf.JIS:
+    u = unicode(txt, 'iso2022_jp')
+    return u.encode('utf-8')
+  for enc in ['utf-8', 'euc_jp', 'shift_jis']:
+    try:
+      u = unicode(txt, enc)
+      return u.encode('utf-8')
+    except UnicodeError:
+      pass
+  return txt
+
diff -urN viewvc-1.2.0-dev/lib/viewvc.py viewvc-1.2.0-devm/lib/viewvc.py
--- viewvc-1.2.0-dev/lib/viewvc.py	2008-10-31 02:37:04.023491000 +0900
+++ viewvc-1.2.0-devm/lib/viewvc.py	2008-11-11 15:08:10.647432400 +0900
@@ -21,6 +21,7 @@
 debug.t_start('startup')
 debug.t_start('imports')
 
+import toutf8
 # standard modules that we know are in the path or builtin
 import sys
 import os
@@ -1084,14 +1085,21 @@
 def format_log(log, cfg, htmlize=1):
   if not log:
     return log
+  log = toutf8.toutf8( log)
+  length = len( log)
+  i = cfg.options.short_log_len
+  if length > i:
+    if ( ord( log[ i -1]) & 0x80):
+      while (length > i) and (( ord( log[ i]) & 0xc0) == 0x80):
+        i += 1
+    log = log[:i]
   if htmlize:
-    s = htmlify(log[:cfg.options.short_log_len],
-                cfg.options.mangle_email_addresses)
+    s = htmlify(log, cfg.options.mangle_email_addresses)
   else:
-    s = cgi.escape(log[:cfg.options.short_log_len])
+    s = cgi.escape(log)
     if cfg.options.mangle_email_addresses == 2:
       s = re.sub(_re_rewrite_email, r'\1@...', s)
-  if len(log) > cfg.options.short_log_len:
+  if length > i:
     s = s + '...'
   return s
 
@@ -1337,10 +1345,10 @@
                                 get_lexer_for_mimetype, \
                                 get_lexer_for_filename
     try:
-      lexer = get_lexer_for_mimetype(mime_type)
+      lexer = get_lexer_for_mimetype(mime_type, encoding='pykf')
     except ClassNotFound:
       try:
-        lexer = get_lexer_for_filename(filename)
+        lexer = get_lexer_for_filename(filename, encoding='pykf')
       except ClassNotFound:
         use_pygments = 0
   except ImportError:
@@ -1403,7 +1411,7 @@
     return None
   if cfg.options.use_localtime:
     localtime = time.localtime(date)
-    return time.asctime(localtime) + ' ' + time.tzname[localtime[8]]
+    return time.asctime(localtime) + ' ' + toutf8.toutf8(time.tzname[localtime[8]])
   else:
     return time.asctime(time.gmtime(date)) + ' UTC'
 
